{"title":"19+ JavaScript Shorthand Coding Techniques","sourceUrl":"https://www.sitepoint.com/shorthand-javascript-techniques/","path":"JavaScript/JavaScript/JavaScript/JavaScript/JavaScript/JavaScript/JavaScript/","category":"JavaScript","tags":["JavaScript"," Tips & Tricks"],"excerpt":"This really is a must read for any JavaScript-based developer. I have written this article as a vital source of reference for learning shorthand JavaScript coding techniques that I have picked up over the years. To help you understand what is going on I have included the longhand versions to give some coding perspective.","date":{"$$date":1540828894828},"coverImage":"","type":"Post","frontmatter":"---\npath: \"JavaScript/\"\ndate: \"2018-10-12\"\ntitle: \"19+ JavaScript Shorthand Coding Techniques\"\ntags: [\"JavaScript\",\"Tips & Tricks\"]\ncategory: \"JavaScript\"\ncategoryColor: \"#F3C610\"\nexcerpt: \"This really is a must read for any JavaScript-based developer. I have written this article as a vital source of reference for learning shorthand JavaScript coding techniques that I have picked up over the years. To help you understand what is going on I have included the longhand versions to give some coding perspective.\"\ncoverImage: \"\"\nsourceUrl: \"https://www.sitepoint.com/shorthand-javascript-techniques/\"\ntype: \"Post\"\n---\n    ","filePath":"pages/JavaScript/.md","_id":"2DKvxBjoYH9lL4Vq","htmlCode":"<div><div><div>\n      <p><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/jquery4u/2013/02/improve-your-javascript.jpg\" alt=\"improve-your-javascript\" width=\"820\" height=\"150\"></p>\n<p><strong>This really is a must read for any JavaScript-based developer</strong>. I have written this article as a vital source of reference for learning shorthand JavaScript coding techniques that I have picked up over the years. To help you understand what is going on I have included the longhand versions to give some coding perspective.</p>\n<blockquote>\n<p><strong>June 14th, 2017</strong>: This article was updated to add new shorthand tips based on ES6. If you want to learn more about the changes in ES6, sign up for SitePoint Premium and check out our screencast <a href=\"https://www.sitepoint.com/premium/screencasts/a-look-into-es2016\">A Look into ES6</a></p>\n</blockquote>\n<h2>1. The Ternary Operator</h2>\n<div><div><span>--ADVERTISEMENT--</span></div>\n\n\n<script src=\"https://play.aniview.com/5858ed930b8ee8851941a7bb/59627b0528a0616e231692a2/SitepointPMP.js\"></script><script>\nvar el = document.getElementById('aniBox');\nvar adBox = document.getElementById('adBox');\n// create an observer instance\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    if(mutation.attributeName == 'style'){\n      var s = el.getAttribute('style');\n      if(s.search('height: 360px') !=  -1) {\n        adBox.style = 'display: block';\n      }\n      else {\n        adBox.style = 'display: none';\n      }\n}\n  });    \n});\n\n// configuration of the observer:\nvar config = { attributes: true, attributeFilter: ['style']};\n \n// pass in the target node, as well as the observer options\nobserver.observe(el, config);\n</script></div><p>This is a great code saver when you want to write an if..else statement in just one line.</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> x <span>=</span> <span>20</span><span>;</span>\n<span>let</span> answer<span>;</span>\n<span>if</span> <span>(</span>x <span>&gt;</span> <span>10</span><span>)</span> <span>{</span>\n    answer <span>=</span> <span>'greater than 10'</span><span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n    answer <span>=</span> <span>'less than 10'</span><span>;</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>const</span> answer <span>=</span> x <span>&gt;</span> <span>10</span> <span>?</span> <span>'greater than 10'</span> <span>:</span> <span>'less than 10'</span><span>;</span>\n</code></pre>\n<p>You can also nest your if statement like this:</p>\n<pre><code><span>const</span> answer <span>=</span> x <span>&gt;</span> <span>10</span> <span>?</span> <span>\" greater than 10\"</span> <span>:</span> x </code></pre>\n<h2>2. Short-circuit Evaluation Shorthand</h2>\n<p>When assigning a variable value to another variable, you may want to ensure that the source variable is not null, undefined or empty. You can either write a long if statement with multiple conditionals, or use a short-circuit evaluation.</p>\n<p>Longhand:</p>\n<pre><code><span>if</span> <span>(</span>variable1 <span>!==</span> <span>null</span> <span>||</span> variable1 <span>!==</span> undefined <span>||</span> variable1 <span>!==</span> <span>''</span><span>)</span> <span>{</span>\n     <span>let</span> variable2 <span>=</span> variable1<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>const</span> variable2 <span>=</span> variable1  <span>||</span> <span>'new'</span><span>;</span>\n</code></pre>\n<p>Don’t believe me? Test it yourself (paste the following code in <a href=\"https://es6console.com/\">es6console</a>):</p>\n<pre><code><span>let</span> variable1<span>;</span>\n<span>let</span> variable2 <span>=</span> variable1  <span>||</span> <span>''</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>variable2 <span>===</span> <span>''</span><span>)</span><span>;</span> <span spellcheck=\"true\">// prints true</span>\n\nvariable1 <span>=</span> <span>'foo'</span><span>;</span>\nvariable2 <span>=</span> variable1  <span>||</span> <span>''</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>variable2<span>)</span><span>;</span> <span spellcheck=\"true\">// prints foo</span>\n</code></pre>\n<h2>3. Declaring Variables Shorthand</h2>\n<p>It is good practice to declare your variable assignments at the beginning of your functions. This shorthand method can save you lots of time and space when declaring multiple variables at the same time.</p>\n<p>Longhand:</p>\n<pre><code><span>let</span> x<span>;</span>\n<span>let</span> y<span>;</span>\n<span>let</span> z <span>=</span> <span>3</span><span>;</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>let</span> x<span>,</span> y<span>,</span> z<span>=</span><span>3</span><span>;</span>\n</code></pre>\n<h2>4. If Presence Shorthand</h2>\n<p>This might be trivial, but worth a mention. When doing “if checks”, assignment operators can sometimes be omitted.</p>\n<p>Longhand:</p>\n<pre><code><span>if</span> <span>(</span>likeJavaScript <span>===</span> <span>true</span><span>)</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>if</span> <span>(</span>likeJavaScript<span>)</span>\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> these two examples are not exactly equal, as the shorthand check will pass as long as <code>likeJavaScript</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">truthy value</a>.</p>\n</blockquote>\n<p>Here is another example. If “a” is NOT equal to true, then do something.</p>\n<p>Longhand:</p>\n<pre><code><span>let</span> a<span>;</span>\n<span>if</span> <span>(</span> a <span>!==</span> <span>true</span> <span>)</span> <span>{</span>\n<span spellcheck=\"true\">// do something...</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>let</span> a<span>;</span>\n<span>if</span> <span>(</span> <span>!</span>a <span>)</span> <span>{</span>\n<span spellcheck=\"true\">// do something...</span>\n<span>}</span>\n</code></pre>\n<h2>5. JavaScript for Loop Shorthand</h2>\n<p>This little tip is really useful if you want plain JavaScript and not rely on external libraries such as jQuery or lodash.</p>\n<p>Longhand:</p>\n<pre><code><span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> allImgs<span>.</span>length<span>;</span> i<span>++</span><span>)</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>for</span> <span>(</span><span>let</span> index <span>of</span> allImgs<span>)</span>\n</code></pre>\n<p>Shorthand for Array.forEach:</p>\n<pre><code><span>function</span> <span>logArrayElements</span><span>(</span>element<span>,</span> index<span>,</span> array<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"a[\"</span> <span>+</span> index <span>+</span> <span>\"] = \"</span> <span>+</span> element<span>)</span><span>;</span>\n<span>}</span>\n<span>[</span><span>2</span><span>,</span> <span>5</span><span>,</span> <span>9</span><span>]</span><span>.</span><span>forEach</span><span>(</span>logArrayElements<span>)</span><span>;</span>\n<span spellcheck=\"true\">// logs:</span>\n<span spellcheck=\"true\">// a[0] = 2</span>\n<span spellcheck=\"true\">// a[1] = 5</span>\n<span spellcheck=\"true\">// a[2] = 9</span>\n</code></pre>\n<h2>6. Short-circuit Evaluation</h2>\n<p>Instead of writing six lines of code to assign a default value if the intended parameter is null or undefined, we can simply use a short-circuit logical operator and accomplish the same thing with just one line of code.</p>\n<p>Longhand:</p>\n<pre><code><span>let</span> dbHost<span>;</span>\n<span>if</span> <span>(</span>process<span>.</span>env<span>.</span>DB_HOST<span>)</span> <span>{</span>\n  dbHost <span>=</span> process<span>.</span>env<span>.</span>DB_HOST<span>;</span>\n<span>}</span> <span>else</span> <span>{</span>\n  dbHost <span>=</span> <span>'localhost'</span><span>;</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>const</span> dbHost <span>=</span> process<span>.</span>env<span>.</span>DB_HOST <span>||</span> <span>'localhost'</span><span>;</span>\n</code></pre>\n<h2>7. Decimal base exponents</h2>\n<p>You may have seen this one around. It’s essentially a fancy way to write numbers without the trailing zeros. For example, 1e7 essentially means 1 followed by 7 zeros. It represents a decimal base (which JavaScript interprets as a float type) equal to 10,000,000.</p>\n<p>Longhand:</p>\n<pre><code><span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10000</span><span>;</span> i<span>++</span><span>)</span> <span>{</span><span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>1e7</span><span>;</span> i<span>++</span><span>)</span> <span>{</span><span>}</span>\n\n<span spellcheck=\"true\">// All the below will evaluate to true</span>\n<span>1e0</span> <span>===</span> <span>1</span><span>;</span>\n<span>1e1</span> <span>===</span> <span>10</span><span>;</span>\n<span>1e2</span> <span>===</span> <span>100</span><span>;</span>\n<span>1e3</span> <span>===</span> <span>1000</span><span>;</span>\n<span>1e4</span> <span>===</span> <span>10000</span><span>;</span>\n<span>1e5</span> <span>===</span> <span>100000</span><span>;</span>\n</code></pre>\n<h2>8. Object Property Shorthand</h2>\n<p>Defining object literals in JavaScript makes life much easier. ES6 provides an even easier way of assigning properties to objects. If the property name is the same as the key name, you can take advantage of the shorthand notation.</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> obj <span>=</span> <span>{</span> x<span>:</span>x<span>,</span> y<span>:</span>y <span>}</span><span>;</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>const</span> obj <span>=</span> <span>{</span> x<span>,</span> y <span>}</span><span>;</span>\n</code></pre>\n<h2>9. Arrow Functions Shorthand</h2>\n<p>Classical functions are easy to read and write in their plain form, but they do tend to become a bit verbose and confusing once you start nesting them in other function calls.</p>\n<p>Longhand:</p>\n<pre><code><span>function</span> <span>sayHello</span><span>(</span>name<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'Hello'</span><span>,</span> name<span>)</span><span>;</span>\n<span>}</span>\n\n<span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>'Loaded'</span><span>)</span>\n<span>}</span><span>,</span> <span>2000</span><span>)</span><span>;</span>\n\nlist<span>.</span><span>forEach</span><span>(</span><span>function</span><span>(</span>item<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>item<span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code>sayHello <span>=</span> name <span>=</span><span>&gt;</span> console<span>.</span><span>log</span><span>(</span><span>'Hello'</span><span>,</span> name<span>)</span><span>;</span>\n\n<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=</span><span>&gt;</span> console<span>.</span><span>log</span><span>(</span><span>'Loaded'</span><span>)</span><span>,</span> <span>2000</span><span>)</span><span>;</span>\n\nlist<span>.</span><span>forEach</span><span>(</span>item <span>=</span><span>&gt;</span> console<span>.</span><span>log</span><span>(</span>item<span>)</span><span>)</span><span>;</span>\n</code></pre>\n<p>It’s important to note that the value of <code><span>this</span></code> inside an arrow function is determined differently than for longhand functions, so the two examples are not strictly equivalent. See <a href=\"https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/\">this article on arrow function syntax</a> for more details.</p>\n<h2>10. Implicit Return Shorthand</h2>\n<p>Return is a keyword we use often to return the final result of a function. An arrow functions with a single statement will implicitly return the result its evaluation (the function must omit the braces (<code><span>{</span><span>}</span></code>) in order to omit the return keyword). </p>\n<p>To return a multi-line statement (such as an object literal), it’s necessary to use <code><span>(</span><span>)</span></code> instead of <code><span>{</span><span>}</span></code> to wrap your function body. This ensures the code is evaluated as a single statement.</p>\n<p>Longhand:</p>\n<pre><code><span>function</span> <span>calcCircumference</span><span>(</span>diameter<span>)</span> <span>{</span>\n  <span>return</span> Math<span>.</span>PI <span>*</span> diameter\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code>calcCircumference <span>=</span> diameter <span>=</span><span>&gt;</span> <span>(</span>\n  Math<span>.</span>PI <span>*</span> diameter<span>;</span>\n<span>)</span>\n</code></pre>\n<h2>11. Default Parameter Values</h2>\n<p>You can use the if statement to define default values for function parameters. In ES6, you can define the default values in the function declaration itself.</p>\n<p>Longhand:</p>\n<pre><code><span>function</span> <span>volume</span><span>(</span>l<span>,</span> w<span>,</span> h<span>)</span> <span>{</span>\n  <span>if</span> <span>(</span>w <span>===</span> undefined<span>)</span>\n    w <span>=</span> <span>3</span><span>;</span>\n  <span>if</span> <span>(</span>h <span>===</span> undefined<span>)</span>\n    h <span>=</span> <span>4</span><span>;</span>\n  <span>return</span> l <span>*</span> w <span>*</span> h<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code>volume <span>=</span> <span>(</span>l<span>,</span> w <span>=</span> <span>3</span><span>,</span> h <span>=</span> <span>4</span> <span>)</span> <span>=</span><span>&gt;</span> <span>(</span>l <span>*</span> w <span>*</span> h<span>)</span><span>;</span>\n\n<span>volume</span><span>(</span><span>2</span><span>)</span> <span spellcheck=\"true\">//output: 24</span>\n</code></pre>\n<h2>12. Template Literals</h2>\n<p>Aren’t you tired of using <code><span>' + '</span></code> to concatenate multiple variables into a string? Isn’t there a much easier way of doing this? If you are able to use ES6, then you are in luck. All you need to do is use is the backtick, and <code>$<span>{</span><span>}</span></code> to enclose your variables.</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> welcome <span>=</span> <span>'You have logged in as '</span> <span>+</span> first <span>+</span> <span>' '</span> <span>+</span> last <span>+</span> <span>'.'</span>\n\n<span>const</span> db <span>=</span> <span>'http://'</span> <span>+</span> host <span>+</span> <span>':'</span> <span>+</span> port <span>+</span> <span>'/'</span> <span>+</span> database<span>;</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>const</span> welcome <span>=</span> <span><span>`You have logged in as </span><span><span>${</span>first<span>}</span></span><span> </span><span><span>${</span>last<span>}</span></span><span>`</span></span><span>;</span>\n\n<span>const</span> db <span>=</span> <span><span>`http://</span><span><span>${</span>host<span>}</span></span><span>:</span><span><span>${</span>port<span>}</span></span><span>/</span><span><span>${</span>database<span>}</span></span><span>`</span></span><span>;</span>\n</code></pre>\n<h2>13. Destructuring Assignment Shorthand</h2>\n<p>If you are working with any popular web framework, there are high chances you will be using arrays or data in the form of object literals to pass information between components and APIs. Once the data object reaches a component, you’ll need to unpack it.</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> observable <span>=</span> <span>require</span><span>(</span><span>'mobx/observable'</span><span>)</span><span>;</span>\n<span>const</span> action <span>=</span> <span>require</span><span>(</span><span>'mobx/action'</span><span>)</span><span>;</span>\n<span>const</span> runInAction <span>=</span> <span>require</span><span>(</span><span>'mobx/runInAction'</span><span>)</span><span>;</span>\n\n<span>const</span> store <span>=</span> <span>this</span><span>.</span>props<span>.</span>store<span>;</span>\n<span>const</span> form <span>=</span> <span>this</span><span>.</span>props<span>.</span>form<span>;</span>\n<span>const</span> loading <span>=</span> <span>this</span><span>.</span>props<span>.</span>loading<span>;</span>\n<span>const</span> errors <span>=</span> <span>this</span><span>.</span>props<span>.</span>errors<span>;</span>\n<span>const</span> entity <span>=</span> <span>this</span><span>.</span>props<span>.</span>entity<span>;</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>import</span> <span>{</span> observable<span>,</span> action<span>,</span> runInAction <span>}</span> <span>from</span> <span>'mobx'</span><span>;</span>\n\n<span>const</span> <span>{</span> store<span>,</span> form<span>,</span> loading<span>,</span> errors<span>,</span> entity <span>}</span> <span>=</span> <span>this</span><span>.</span>props<span>;</span>\n</code></pre>\n<p>You can even assign your own variable names:</p>\n<pre><code><span>const</span> <span>{</span> store<span>,</span> form<span>,</span> loading<span>,</span> errors<span>,</span> entity<span>:</span>contact <span>}</span> <span>=</span> <span>this</span><span>.</span>props<span>;</span>\n</code></pre>\n<h2>14. Multi-line String Shorthand</h2>\n<p>If you have ever found yourself in need of writing multi-line strings in code, this is how you would write it:</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> lorem <span>=</span> <span>'Lorem ipsum dolor sit amet, consectetur\\n\\t'</span>\n    <span>+</span> <span>'adipisicing elit, sed do eiusmod tempor incididunt\\n\\t'</span>\n    <span>+</span> <span>'ut labore et dolore magna aliqua. Ut enim ad minim\\n\\t'</span>\n    <span>+</span> <span>'veniam, quis nostrud exercitation ullamco laboris\\n\\t'</span>\n    <span>+</span> <span>'nisi ut aliquip ex ea commodo consequat. Duis aute\\n\\t'</span>\n    <span>+</span> <span>'irure dolor in reprehenderit in voluptate velit esse.\\n\\t'</span>\n</code></pre>\n<p>But there is an easier way. Just use backticks.</p>\n<p>Shorthand:</p>\n<pre><code><span>const</span> lorem <span>=</span> <span><span>`Lorem ipsum dolor sit amet, consectetur\n    adipisicing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim\n    veniam, quis nostrud exercitation ullamco laboris\n    nisi ut aliquip ex ea commodo consequat. Duis aute\n    irure dolor in reprehenderit in voluptate velit esse.`</span></span>\n</code></pre>\n<h2>15. Spread Operator Shorthand</h2>\n<p>The <strong>spread operator</strong>, introduced in ES6, has several use cases that make JavaScript code more efficient and fun to use. It can be used to replace certain array functions. The spread operator is simply a series of three dots.</p>\n<p>Longhand</p>\n<pre><code><span spellcheck=\"true\">// joining arrays</span>\n<span>const</span> odd <span>=</span> <span>[</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>;</span>\n<span>const</span> nums <span>=</span> <span>[</span><span>2</span> <span>,</span><span>4</span> <span>,</span> <span>6</span><span>]</span><span>.</span><span>concat</span><span>(</span>odd<span>)</span><span>;</span>\n\n<span spellcheck=\"true\">// cloning arrays</span>\n<span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>;</span>\n<span>const</span> arr2 <span>=</span> arr<span>.</span><span>slice</span><span>(</span><span>)</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span spellcheck=\"true\">// joining arrays</span>\n<span>const</span> odd <span>=</span> <span>[</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>5</span> <span>]</span><span>;</span>\n<span>const</span> nums <span>=</span> <span>[</span><span>2</span> <span>,</span><span>4</span> <span>,</span> <span>6</span><span>,</span> <span>...</span>odd<span>]</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>nums<span>)</span><span>;</span> <span spellcheck=\"true\">// [ 2, 4, 6, 1, 3, 5 ]</span>\n\n<span spellcheck=\"true\">// cloning arrays</span>\n<span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>;</span>\n<span>const</span> arr2 <span>=</span> <span>[</span><span>...</span>arr<span>]</span><span>;</span>\n</code></pre>\n<p>Unlike the <code><span>concat</span><span>(</span><span>)</span></code> function, you can use the spread operator to insert an array anywhere inside another array.</p>\n<pre><code><span>const</span> odd <span>=</span> <span>[</span><span>1</span><span>,</span> <span>3</span><span>,</span> <span>5</span> <span>]</span><span>;</span>\n<span>const</span> nums <span>=</span> <span>[</span><span>2</span><span>,</span> <span>...</span>odd<span>,</span> <span>4</span> <span>,</span> <span>6</span><span>]</span><span>;</span>\n</code></pre>\n<p>You can also combine the spread operator with ES6 destructuring notation:</p>\n<pre><code><span>const</span> <span>{</span> a<span>,</span> b<span>,</span> <span>...</span>z <span>}</span> <span>=</span> <span>{</span> a<span>:</span> <span>1</span><span>,</span> b<span>:</span> <span>2</span><span>,</span> c<span>:</span> <span>3</span><span>,</span> d<span>:</span> <span>4</span> <span>}</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>a<span>)</span> <span spellcheck=\"true\">// 1</span>\nconsole<span>.</span><span>log</span><span>(</span>b<span>)</span> <span spellcheck=\"true\">// 2</span>\nconsole<span>.</span><span>log</span><span>(</span>z<span>)</span> <span spellcheck=\"true\">// { c: 3, d: 4 }</span>\n</code></pre>\n<h2>16. Mandatory Parameter Shorthand</h2>\n<p>By default, JavaScript will set function parameters to <code>undefined</code> if they are not passed a value. Some other languages will throw a warning or error. To enforce parameter assignment, you can use an <code><span>if</span></code> statement to throw an error if <code>undefined</code>, or you can take advantage of the ‘Mandatory parameter shorthand’.</p>\n<p>Longhand:</p>\n<pre><code><span>function</span> <span>foo</span><span>(</span>bar<span>)</span> <span>{</span>\n  <span>if</span><span>(</span>bar <span>===</span> undefined<span>)</span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'Missing parameter!'</span><span>)</span><span>;</span>\n  <span>}</span>\n  <span>return</span> bar<span>;</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code>mandatory <span>=</span> <span>(</span><span>)</span> <span>=</span><span>&gt;</span> <span>{</span>\n  <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'Missing parameter!'</span><span>)</span><span>;</span>\n<span>}</span>\n\nfoo <span>=</span> <span>(</span>bar <span>=</span> <span>mandatory</span><span>(</span><span>)</span><span>)</span> <span>=</span><span>&gt;</span> <span>{</span>\n  <span>return</span> bar<span>;</span>\n<span>}</span>\n</code></pre>\n<h2>17. Array.find Shorthand</h2>\n<p>If you have ever been tasked with writing a find function in plain JavaScript, you would probably have used a for loop. In ES6, a new array function named <code><span>find</span><span>(</span><span>)</span></code> was introduced.</p>\n<p>Longhand:</p>\n<pre><code><span>const</span> pets <span>=</span> <span>[</span>\n  <span>{</span> type<span>:</span> <span>'Dog'</span><span>,</span> name<span>:</span> <span>'Max'</span><span>}</span><span>,</span>\n  <span>{</span> type<span>:</span> <span>'Cat'</span><span>,</span> name<span>:</span> <span>'Karl'</span><span>}</span><span>,</span>\n  <span>{</span> type<span>:</span> <span>'Dog'</span><span>,</span> name<span>:</span> <span>'Tommy'</span><span>}</span><span>,</span>\n<span>]</span>\n\n<span>function</span> <span>findDog</span><span>(</span>name<span>)</span> <span>{</span>\n  <span>for</span><span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i<span>&lt;</span>pets<span>.</span>length<span>;</span> <span>++</span>i<span>)</span> <span>{</span>\n    <span>if</span><span>(</span>pets<span>[</span>i<span>]</span><span>.</span>type <span>===</span> <span>'Dog'</span> <span>&amp;&amp;</span> pets<span>[</span>i<span>]</span><span>.</span>name <span>===</span> name<span>)</span> <span>{</span>\n      <span>return</span> pets<span>[</span>i<span>]</span><span>;</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code>pet <span>=</span> pets<span>.</span><span>find</span><span>(</span>pet <span>=</span><span>&gt;</span> pet<span>.</span>type <span>===</span><span>'Dog'</span> <span>&amp;&amp;</span> pet<span>.</span>name <span>===</span> <span>'Tommy'</span><span>)</span><span>;</span>\nconsole<span>.</span><span>log</span><span>(</span>pet<span>)</span><span>;</span> <span spellcheck=\"true\">// { type: 'Dog', name: 'Tommy' }</span>\n</code></pre>\n<h2>18. Object [key] Shorthand</h2>\n<p>Did you know that <code>Foo<span>.</span>bar</code> can also be written as <code>Foo<span>[</span><span>'bar'</span><span>]</span></code>? At first, there doesn’t seem to be a reason why you should write it like that. However, this notation gives you the building block for writing re-usable code. </p>\n<p>Consider this simplified example of a validation function:</p>\n<pre><code><span>function</span> <span>validate</span><span>(</span>values<span>)</span> <span>{</span>\n  <span>if</span><span>(</span><span>!</span>values<span>.</span>first<span>)</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>if</span><span>(</span><span>!</span>values<span>.</span>last<span>)</span>\n    <span>return</span> <span>false</span><span>;</span>\n  <span>return</span> <span>true</span><span>;</span>\n<span>}</span>\n\nconsole<span>.</span><span>log</span><span>(</span><span>validate</span><span>(</span><span>{</span>first<span>:</span><span>'Bruce'</span><span>,</span>last<span>:</span><span>'Wayne'</span><span>}</span><span>)</span><span>)</span><span>;</span> <span spellcheck=\"true\">// true</span>\n</code></pre>\n<p>This function does its job perfectly. However, consider a scenario where you have very many forms where you need to apply the validation but with different fields and rules. Wouldn’t it be nice to build a generic validation function that can be configured at runtime?</p>\n<p>Shorthand:</p>\n<pre><code><span spellcheck=\"true\">// object validation rules</span>\n<span>const</span> schema <span>=</span> <span>{</span>\n  first<span>:</span> <span>{</span>\n    required<span>:</span><span>true</span>\n  <span>}</span><span>,</span>\n  last<span>:</span> <span>{</span>\n    required<span>:</span><span>true</span>\n  <span>}</span>\n<span>}</span>\n\n<span spellcheck=\"true\">// universal validation function</span>\n<span>const</span> validate <span>=</span> <span>(</span>schema<span>,</span> values<span>)</span> <span>=</span><span>&gt;</span> <span>{</span>\n  <span>for</span><span>(</span>field <span>in</span> schema<span>)</span> <span>{</span>\n    <span>if</span><span>(</span>schema<span>[</span>field<span>]</span><span>.</span>required<span>)</span> <span>{</span>\n      <span>if</span><span>(</span><span>!</span>values<span>[</span>field<span>]</span><span>)</span> <span>{</span>\n        <span>return</span> <span>false</span><span>;</span>\n      <span>}</span>\n    <span>}</span>\n  <span>}</span>\n  <span>return</span> <span>true</span><span>;</span>\n<span>}</span>\n\n\nconsole<span>.</span><span>log</span><span>(</span><span>validate</span><span>(</span>schema<span>,</span> <span>{</span>first<span>:</span><span>'Bruce'</span><span>}</span><span>)</span><span>)</span><span>;</span> <span spellcheck=\"true\">// false</span>\nconsole<span>.</span><span>log</span><span>(</span><span>validate</span><span>(</span>schema<span>,</span> <span>{</span>first<span>:</span><span>'Bruce'</span><span>,</span>last<span>:</span><span>'Wayne'</span><span>}</span><span>)</span><span>)</span><span>;</span> <span spellcheck=\"true\">// true</span>\n</code></pre>\n<p>Now we have a validate function we can reuse in all forms without needing to write a custom validation function for each.</p>\n<h2>19. Double Bitwise NOT Shorthand</h2>\n<p>Bitwise operators are one of those features you learn about in beginner JavaScript tutorials and you never get to implement them anywhere. Besides, who wants to work with ones and zeroes if you are not dealing with binary?</p>\n<p>There is, however, a very practical use case for the Double Bitwise NOT operator. You can use it as a replacement for <code>Math<span>.</span><span>floor</span><span>(</span><span>)</span></code>. The advantage of the Double Bitwise NOT operator is that it performs the same operation much faster. You can read more about Bitwise operators <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">here</a>.</p>\n<p>Longhand:</p>\n<pre><code>Math<span>.</span><span>floor</span><span>(</span><span>4.9</span><span>)</span> <span>===</span> <span>4</span>  <span spellcheck=\"true\">//true</span>\n</code></pre>\n<p>Shorthand:</p>\n<pre><code><span>~</span><span>~</span><span>4.9</span> <span>===</span> <span>4</span>  <span spellcheck=\"true\">//true</span>\n</code></pre>\n<h2>20. Suggest One?</h2>\n<p><br></p><div>\n      </div>\n      \n      </div></div></div>","dateUpdated":1540828894828,"author":"Michael Wanyoike & Sam Deering"}
{"date":"2018-10-29T16:00:10.567Z","title":"testet","sourceUrl":"","path":"JavaScript/","category":"JavaScript","tags":["JavaScript"," ES6"],"author":"","excerpt":"","dateCreated":1540828772979,"coverImage":"","type":"Post","frontmatter":"---\npath: 'JavaScript/'\ndate: 'Mon Oct 29 2018 21:30:10 GMT+0530 (India Standard Time)'\ntitle: 'testet'\ntags: ['JavaScript','ES6']\ncategory: 'JavaScript'\ncategoryColor: '#F3C610'\nexcerpt: ''\ncoverImage: ''\nsourceUrl: ''\ntype: 'Post'\n---\n    ","htmlCode":"<div id=\"wrapper-container\"><p>Bitwise operators are one of those features you learn about in beginner JavaScript tutorials and you never get to implement them anywhere. Besides, who wants to work with ones and zeroes if you are not dealing with binary?</p><p>There is, however, a very practical use case for the Double Bitwise NOT operator. You can use it as a replacement for&nbsp;<code>Math<span>.</span><span>floor</span><span>(</span><span>)</span></code>. The advantage of the Double Bitwise NOT operator is that it performs the same operation much faster. You can read more about Bitwise operators&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">here</a>.</p><p>Longhand:</p><pre><code>Math<span>.</span><span>floor</span><span>(</span><span>4.9</span><span>)</span> <span>===</span> <span>4</span>  <span spellcheck=\"true\">//true</span>\n</code></pre><p>Shorthand:</p><pre><code><span>~</span><span>~</span><span>4.9</span> <span>===</span> <span>4</span>  <span spellcheck=\"true\">//true</span>\n</code></pre><h2>20. Suggest One?</h2></div>","filePath":"pages/JavaScript/.md","_id":"45nakLdPkctMD9Qn"}
{"title":"test123","sourceUrl":"","path":"JavaScript/","category":"JavaScript","tags":["JavaScript"," ES6"],"author":"","excerpt":"","dateCreated":1540824413730,"coverImage":"","type":"Post","frontmatter":"---\npath: 'JavaScript/'\ndate: 'undefined'\ntitle: 'test123'\ntags: ['JavaScript','ES6']\ncategory: 'JavaScript'\ncategoryColor: '#F3C610'\nexcerpt: ''\ncoverImage: ''\nsourceUrl: ''\ntype: 'Post'\n---\n    ","htmlCode":"<div id=\"wrapper-container\"><p>sdsdasd</p></div>","filePath":"pages/JavaScript/.md","_id":"4SDjPIGAplCaSgyj"}
{"title":"Understanding, creating and subscribing to observables in Angular 22","sourceUrl":"","path":"RxJs/RxJs/RxJs/JavaScript/","category":"RxJs","tags":["RxJs"," Observables"],"excerpt":"","date":{"$$date":1540568407188},"coverImage":"","type":"Post","frontmatter":"---\npath: 'JavaScript/'\ndate: ''\ntitle: 'Understanding, creating and subscribing to observables in Angular 22'\ntags: ['JavaScript','ES6']\ncategory: 'JavaScript'\ncategoryColor: '#F3C610'\nexcerpt: ''\ncoverImage: ''\nsourceUrl: ''\ntype: 'Post'\n---\n    ","htmlCode":"<div id=\"wrapper-container\"><div><div><div><h3 name=\"fbad\">Observables</h3><blockquote name=\"a21a\">Observables are lazy collections of multiple values over&nbsp;time.</blockquote><p name=\"d926\">yeah, right…well, actually it’s pretty easy:</p><ol><li name=\"931c\"><span>Observables are lazy</span><br>You could think of lazy observables as newsletters. For each subscriber a new newsletter is created. They are then only send to those people, and not to anyone else.</li><li name=\"77a7\"><span>Observables can have multiple values over time</span><br>Now if you keep that subscription to the newsletter open, you will get a new one every once and a while. The sender decides when you get it but all you have to do is just wait until it comes straight into your inbox.</li></ol><p name=\"a3c9\">If you come from the world of promises this is a key difference as promises always return only one value. Another thing is that observables are cancelable. If you don’t want your newsletter anymore, you unsubscribe. With promises this is different, you can’t cancel a promise. If the promise is handed to you, the process that will produce that promise’s resolution is already underway, and you generally don’t have access to prevent that promise’s resolution from executing.</p><h3 name=\"2edf\">Push vs&nbsp;pull</h3><p name=\"b4bb\">A key thing to understand when using observables is that observables push. Push and pull are two different ways that describe how a&nbsp;<em>data producer&nbsp;</em>communicates with the&nbsp;<em>data consumer</em>.</p><p name=\"b14a\"><span>Pull<br></span>When pulling, the data consumer decides when it get’s data from the data producer. The producer is unaware of when data will be delivered to the consumer.</p><p name=\"376f\">Every javascript function uses the pull. The function is a Producer of data, and the code that calls the function is consuming it by “pulling” out a&nbsp;<em>single</em>&nbsp;return value from its call.</p><p name=\"601c\"><span>Push<br></span>When pushing, it works the other way around. The data producer (the creator of the newsletter) decides when the consumer (the subscriber to the newsletter) gets the data.</p><p name=\"60bf\">Promises are the most common way of push in JavaScript today. A promise (the producer) delivers a resolved value to registered callbacks (the consumers), but unlike functions, it is the promise which is in charge of determining precisely when that value is “pushed” to the callbacks.</p><p name=\"6da8\">Observables are a new way of pushing data in JavaScript. An observable is a Producer of multiple values, “pushing” them to subscribers.</p><h3 name=\"a493\">Observables in&nbsp;Angular</h3><p name=\"c447\">If you start using Angular you will probably encounter observables when setting up your HTTP requests. So let’s start there.</p><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>import { Observable } from \"rxjs/Rx\"<br>import { Injectable } from \"@angular/core\"<br>import { Http, Response } from \"@angular/http\"<br><br>@Injectable()<br>export class HttpClient {<br><br>    constructor(<br>        public http: Http<br>    ) {}<br><br>    public fetchUsers() {<br>        return this.http.get(\"/api/users\").map((res: Response) =&gt; res.json())<br>    }<br>}</code></pre><p name=\"30d8\">We have now created a simple HttpClient with a fetchUsers method that returns an observable. We probably like to display the users in some sort of list, so let’s do something with this method. Since this method returns an observable we have to subscribe to it. In Angular we can subscribe to an observable in two ways:</p><p name=\"3e9a\"><span>Manner 1:</span><br>We subscribe to an observable in our template using the async pipe. The benefit of this is that Angular deals with your subscription during the lifecycle of a component. Angular will automatically subscribe and unsubscribe for you. Don’t forget to import the “CommonModule” into your module, as the async pipe will be exposed from that.</p><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>import { Component } from \"@angular/core\"<br>import { Observable } from \"rxjs/Rx\"<br><br>// client<br>import { HttpClient } from \"../services/client\"<br><br>// interface<br>import { IUser } from \"../services/interfaces\"<br><br>@Component({<br>    selector: \"user-list\",<br>    templateUrl:  \"./template.html\",<br>})<br>export class UserList {<br><br>    public users$: Observable&lt;IUser[]&gt;<br><br>    constructor(<br>        public client: HttpClient,<br>    ) {}<br><br>    // do a call to fetch the users on init of component<br>    // the fetchUsers method returns an observable<br>    // which we assign to the users$ property of our class<br>    public ngOnInit() {<br>        this.users$ = this.client.fetchUsers()<br>    }<br>}</code></pre><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>&lt;!-- We use the async pipe to automatically subscribe/unsubscribe to our observable --&gt;<br>&lt;ul class=\"user__list\" *ngIf=\"(users$ | async).length\"&gt;<br>    &lt;li class=\"user\" *ngFor=\"let user of users$ | async\"&gt;<br>        {{ user.name }} - {{ user.birth_date }}<br>    &lt;/li&gt;<br>&lt;/ul&gt;</code></pre><p name=\"ebfd\"><span name=\"anon_be25f95e5afc\" data-creator-ids=\"anon\">Please note the dollar sign. Using the dollar sign in the name of a variable that is an observable, is considered best practice. This way it’s easy to identify if your variable is an observable or not.</span></p><p name=\"732e\"><span>Manner 2:</span><br>We subscribe to the observable ourselves using the actual&nbsp;<code>subscribe()</code>method. This can be handy if you would first like to do something with the data before displaying it. The downside is that you have to manage the subscription yourself.</p><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>import { Component } from \"@angular/core\"<br><br>// client<br>import { HttpClient } from \"../services/client\"<br><br>// interface<br>import { IUser } from \"../services/interfaces\"<br><br>@Component({<br>    selector: \"user-list\",<br>    templateUrl:  \"./template.html\",<br>})<br>export class UserList {<br><br>    public users: IUser[]<br><br>    constructor(<br>        public client: HttpClient,<br>    ) {}<br><br>    // do a call to fetch the users on init of component<br>    // we manually subscribe to this method and take the users<br>    // in our callback<br>    public ngOnInit() {<br>        this.client.fetchUsers().subscribe((users: IUser[]) =&gt; {<br><br>            // do stuff with our data here.<br>            // ....<br><br>            // asign data to our class property in the end<br>            // so it will be available to our template<br>            this.users = users<br>        })<br>    }<br>}</code></pre><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>&lt;ul class=\"user__list\" *ngIf=\"users.length\"&gt;<br>    &lt;li class=\"user\" *ngFor=\"let user of users\"&gt;<br>        {{ user.name }} - {{ user.birth_date }}<br>    &lt;/li&gt;<br>&lt;/ul&gt;</code></pre><p name=\"9176\">As you can see the template logic is quite similar, the component logic can actually become much different en more complex if you go for manner 2. In general i would recommend to choose manner 1. As this is the most easy and you don’t have to manually manage your subscriptions. Keeping your subscriptions open while not using them is a memory leak and therefore not good.</p><h3 name=\"8a40\">Creating an observable yourself</h3><p name=\"c5ed\">Now that you know how to deal with common observables that are given to you by Angular, it’s good to know how you create an observable yourself. The simplest version looks like this:</p><pre style=\"font-family: monospace, monospace; font-size: 20px; margin: 0px; color: rgba(0, 0, 0, 0.84); background-color: rgb(255, 255, 255);\"><code>import { Observable } from \"rxjs/Observable\"<br><br>// create observable<br>const simpleObservable = new Observable((observer) =&gt; {<br>    <br>    // observable execution<br>    observer.next(\"bla bla bla\")<br>    observer.complete()<br>})<br><br>// subscribe to the observable<br>simpleObservable.subscribe()<br><br>// dispose the observable<br>simpleObservable.unsubscribe()</code></pre><p name=\"e9af\">As you can see in the example observables are&nbsp;<span>created</span>&nbsp;by using the&nbsp;<code>new Observable()</code>&nbsp;call, then&nbsp;<span>subscribed</span>&nbsp;to by an observer,&nbsp;<span>executed</span>&nbsp;by calling the&nbsp;<code>next()</code>&nbsp;and&nbsp;<span>disposed</span>&nbsp;by calling&nbsp;<code>unsubscribe()</code>.</p><p name=\"f4c6\"><span>Creating observables<br></span>Creating observables is easy, just call the&nbsp;<code>new Observable()</code>&nbsp;and pass along one argument which represents the observer. Therefore i usually call it “observer” as well.</p><p name=\"1c2e\"><span>Subscribing to observables<br></span>Remember, observables are lazy. If you don’t subscribe nothing is going to happen. It’s good to know that when you subscribe to an observer, each call of&nbsp;<code>subscribe()</code>&nbsp;will trigger it’s own independent execution for that given observer. Subscribe calls are not shared among multiple subscribers to the same observable.</p><p name=\"2f40\"><span>Executing observables<br></span>The code inside an observables represents the execution of the observables. On the parameter that was given when creating the observable there are three functions available to send data to the subscribers of the observable:</p><ul><li name=\"3b29\">“next”: sends any value such as Numbers, Arrays or objects to it’s subscribers.</li><li name=\"987d\">“error”: sends a Javascript error or exception</li><li name=\"156d\">“complete”: does not send any value.</li></ul><p name=\"149c\">Calls of the next are the most common as they actually deliver the data to it’s subscribers. During observable execution there can be an infinite calls to the&nbsp;<code>observer.next()</code>, however when&nbsp;<code>observer.error()</code>&nbsp;or&nbsp;<code>observer.complete()</code>is called, the execution stops and no more data will be delivered to the subscribers.</p><p name=\"7c99\"><span>Disposing observables<br></span>Because observable execution can run for an infinite amount of time, we need a way to stop it from executing. Since each execution is run for every subscriber it’s important to not keep subscriptions open for subscribers that don’t need data anymore, as that would mean a waste of memory and computing power.</p><p name=\"14fe\">When you subscribe to an observable, you get back a subscription, which represents the ongoing execution. Just call&nbsp;<code>unsubscribe()</code>to cancel the execution.</p><h3 name=\"8c9a\">Conclusion</h3><p name=\"58af\">This post should give you a better understanding of how observables actually work. To get even more out of observables the next step is to understand the power of Rxjs and all the helper functions they provide. Rxjs alone could cover multiple posts which i will write about later. If you want to get one step further. Checkout my post about rxjs subjects:&nbsp;<a href=\"https://hackernoon.com/understanding-rxjs-subjects-339428a1815b\" data-href=\"https://hackernoon.com/understanding-rxjs-subjects-339428a1815b\" rel=\"nofollow noopener\" target=\"_blank\">https://hackernoon.com/understanding-rxjs-subjects-339428a1815b</a></p></div></div></div></div>","filePath":"pages/JavaScript/.md","_id":"HsNsWxIc3kK2GXlA"}
{"title":"Building forms using React — everything you need to know","sourceUrl":"https://www.codementor.io/blizzerand/building-forms-using-react-everything-you-need-to-know-iz3eyoq4y","path":"React/React/React/React/Building forms using React — everything you need to know","category":"React","tags":["React"," Form"],"excerpt":"test","date":{"$$date":1539094456041},"coverImage":"https://reactjs.org/docs/forms.html","type":"Post","frontmatter":"---\npath: \"JavaScript/\"\ndate: \"\"\ntitle: \"rererer\"\ntags: [\"JavaScript\",\"ES6\"]\ncategory: \"JavaScript\"\ncategoryColor: \"#F3C610\"\nexcerpt: \"\"\ncoverImage: \"\"\nsourceUrl: \"\"\ntype: \"Post\"\n---\n    ","filePath":"pages/JavaScript/.md","markdownCode":"Forms are integral to any modern application. They serve as a basic medium for users to interact with your app. Developers rely on forms for everything: securely logging in the user, searching and filtering the product list, booking a product, and building a cart, etc. More complex applications built for enterprises are usually more form-intensive, with the input fields spanning over multiple tabs. On top of that, you have to consider the validation logic that needs to be deployed.\n\nIn this tutorial, we're going to look at how React handles forms. We'll cover not just the basics, but also form validation and best practices too — even experienced developers get certain details wrong.\n\nLet's get started.\n\n[](#creating-a-form-controlled-component-vs-uncontrolled-component)Creating a Form — Controlled Component vs. Uncontrolled Component\n------------------------------------------------------------------------------------------------------------------------------------\n\nReact offers a stateful, reactive approach to building forms. Unlike other DOM elements, HTML form elements work differently in React. The form data, for instance, is usually handled by the component rather than the DOM, and is usually implemented using controlled components. The image below perfectly describes how controlled components work in React.\n\n![react.png](https://process.filestackapi.com/cache=expiry:max/Qb7pi8kTzenybAUcijaB)\n\nThe form’s structure is similar to those of the usual HTML forms. However, each input element gets a component of its own, which we call dumb components. The container component is responsible for maintaining the state. The difference is, we're using a callback function to handle form events and then using the container’s state to store the form data. This gives your component better control over the form control elements and the form data.\n\nThe callback function is triggered on events, including change of form control values, or on form submission. The function then pushes the form values into the local state of the component and the data is then said to be controlled by the component. Because we are using the value attribute on the form element, the value displayed will be the value of `this.state.value`.\n\nThere is another technique, popularly known as uncontrolled components, for creating input forms. This is more like traditional HTML forms because the input form data is stored inside the DOM and not within the component. Elements like `<input>`and `<textarea>` maintain their own state, which they update when the input values change. You can query the DOM for the value of an input field using a ref.\n\nHere is an example from the [official docs](https://reactjs.org/docs/uncontrolled-components.html) that demonstrate how uncontrolled components work.\n\n```javascript\n class NameForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    alert('The value is: ' + this.input.value);\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" ref={(input) => this.input = input} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\n\n```\n\nHere, the `<input>` component is responsible for storing its state. The ref attribute creates a reference to the DOM node accessible and you can pull this value when you need it — when you're about to submit the form in the example.\n\nReact recommends using controlled components over refs to implement forms. Refs offer a backdoor to the DOM, which might tempt you to use it to do things the jQuery way. Controlled components, on the other hand, are more straightforward — the form data is handled by a React component. However, if you want to integrate React with a non-React project, or create a quick and easy form for some reason, you can use a `ref`. The rest of this tutorial is going to focus on controlled components.\n\n[](#react-form-demo)React Form Demo\n-----------------------------------\n\nHere is the codesandobx demo for the form that we’ll be creating today.  \n@[React Form Demo](http://codesandbox.io/embed/x8omy0p9z)\n\nYou can also grab a copy of the code from [my GitHub repo](https://github.com/blizzerand/react-forms). Clone the repo, run `npm install`, and then run `npm start`.\n\n[](#structuring-a-form)Structuring a Form\n-----------------------------------------\n\nReact's composition model lets you organize your code into smaller reusable components. Each component exists as an independent functional unit and an hierarchy of components can be used to represent a specific feature. This structure works particularly well with forms. You can create custom components for `<input>`, `<textarea>`, `<select>`, etc. and reuse them to compose a `FormContainer` component.\n\nNote: although it could be tempting to use a form library instead, chances are high that you might come across obstacles when you need to add custom behavior and validation. Creating a reusable form component from scratch will help you bolster your understanding of React forms.\n\n```javascript\nimport React, { Component } from 'react';  \nimport './styles.css';  \nimport FormContainer from './containers/FormContainer';\n\nclass App extends Component {  \n  render() {\n    return (\n      <div className=\"container\">\n        <h3>React Form</h3>\n        <FormContainer />\n      </div>\n    );\n  }\n}\n\nexport default App; \n\n```\n\nFormContainer is a container component that renders all of the form elements and handles all of the business logic. We call it a container component because it takes care of updating the state of the form, handling form submission, and making API calls/dispatching Redux actions. The dumb components or presentational components are concerned with how things look and contain the actual DOM markup. These components receive data and callbacks exclusively as props. I've covered more about it on my [Stateful vs. Stateless components in React](https://code.tutsplus.com/tutorials/stateful-vs-stateless-functional-components-in-react--cms-29541) tutorial.\n\nLet's move on and create a container:\n\n```javascript\nimport React, {Component} from 'react';  \n\n/* Import Components */\nimport CheckBox from '../components/CheckBox';  \nimport Input from '../components/Input';  \nimport TextArea from '../components/TextArea';  \nimport Select from '../components/Select';\nimport Button from '../components/Button'\n\nclass FormContainer extends Component {  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newUser: {\n        name: '',\n        email: '',\n        age: '',\n        gender: '',\n        expertise: '',\n        about: ''\n\n      },\n\n      genderOptions: ['Male', 'Female', 'Others'],\n      skillOptions: ['Programming', 'Development', 'Design', 'Testing']\n\n    }\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n  }\n\n  /* This life cycle hook gets executed when the component mounts */\n\n  handleFormSubmit() {\n    // Form submission logic\n  }\n  handleClearForm() {\n    // Logic for resetting the form\n  }\n  render() {\n    return (\n      <form className=\"container\" onSubmit={this.handleFormSubmit}>\n\n        <Input /> {/* Name of the user */}\n        <Input /> {/* Input for Age */} \n        <Select /> {/* Gender Selection */}\n        <CheckBox /> {/* List of Skills (eg. Programmer, developer) */}\n        <TextArea /> {/* About you */}\n        <Button /> { /*Submit */ }\n        <Button /> {/* Clear the form */}\n      </form>\n    );\n  }\n}\n\nexport default FormContainer;\n}\n\n```\n\nFirst, we've imported the dumb components from the components directory. The components include `<Input>`, `<Select>`, `<CheckBox>`, `<TextArea>`, and `<Button>`.\n\nThen, we have initiated the state for storing the user data and the UI data. Two methods — `handleFormSubmit()` and `handleClearForm()` — have been created to handle the form logic. The render method renders all of the input fields and buttons required for our sign up form.\n\n[](#composing-the-dumb-components)Composing the Dumb Components\n---------------------------------------------------------------\n\nWe've laid out the structure of the form. Next, we need to compose the child components. Let's go through the components one by one.\n\n[](#input)<Input />\n-------------------\n\nThe `<Input />` component displays a one-line input field. The input type could be either text or number. Let's have a look at the props that we need to create an `<Input />` component.\n\n*   `type` — The `type` prop determines whether the input field rendered is of type, text, or number. For instance, if the value of `type` is equal to number, then `<input type=\"number\" />` will be rendered. Otherwise, `<input type=\"text\" />` gets rendered.\n*   `title` — The value of the title prop will be displayed as a label of that particular field.\n*   `name` — This is the name attribute for the input.\n*   `value` — The value (either text or number) that should be displayed inside the input field. You can use this prop to give default value.\n*   `placeholder` — An optional string that you can pass so that the input field displays a placeholder text.\n*   `handleChange` — A control function that gets triggered when the input control element's value changes. The function then updates the state of the parent component and passes the new value through the value prop.\n\nHere's the code for the `<Input/>` component. Note that we're using stateless functional components here.\n\n```javascript\nconst Input = (props) => {\n    return (  \n  <div className=\"form-group\">\n    <label htmlFor={props.name} className=\"form-label\">{props.title}</label>\n    <input\n      className=\"form-input\"\n      id={props.name}\n      name={props.name}\n      type={props.type}\n      value={props.value}\n      onChange={props.handleChange}\n      placeholder={props.placeholder} \n    />\n  </div>\n)\n}\n\nexport default Input;\n\n```\n\nYou can further expand the list of possible attributes and add them as props. Here is what the component's declaration looks like:\n\n```javascript\n<Input type={'text'}\n               title= {'Full Name'} \n               name= {'name'}\n               value={this.state.newUser.name} \n               placeholder = {'Enter your name'}\n               handleChange = {this.handleFullName}\n               /> {/* Name of the user */}\n               \n\n```\n\nThe `handleChange` callback takes care of updating the state and the updated value propagates through `props.value`. I am going to name the callback function as `handleFullName`.\n\n```javascript\n/* FormContainer.jsx */\n\n//...\n  handleFullName(e) {\n   let value = e.target.value;\n   this.setState( prevState => ({ newUser : \n        {...prevState.newUser, name: value\n        }\n      }))\n  }\n//...\n\n```\n\nThe `setState` accepts either an object or an updater function with the following signature.\n\n```\n(prevState, props) => stateChange\n\n```\n\nThe `prevState` object holds the up-to-date value of the previous state. We are going to merge the updated values with the previous state.\n\n_Note_: in JavaScript, class methods are not bound by default. You will need to bind it manually. What does that mean? You will need to add a binding into the constructor for each class method and the binding will look like this:\n\n```\nthis.handleFullName = this.handleFullName.bind(this)\n\n```\n\nAlternatively, you can use [class fields](https://github.com/tc39/proposal-class-fields) to do binding outside the constructor. The feature is still in experimental phase, so you will need to install the babel plugin [transform-class-properties to support it](https://babeljs.io/docs/plugins/transform-class-properties/).\n\nThe next input field is going to be for age. The logic of the `handleAge` will be similar to that of the `handleFullName` method.\n\n```\n/* FormContainer.jsx */\n\nhandleAge(e) {\n       let value = e.target.value;\n   this.setState( prevState => ({ newUser : \n        {...prevState.newUser, age: value\n        }\n      }), () => console.log(this.state.newUser))\n  }\n\n```\n\nThis method updates the state of this.state.newUser.age. Although this approach is okay, you can refactor the code and create a generic handler method that works for all `<Input />` components.\n\n```\n/* FormContainer.jsx */\n\nhandleInput(e) {\n     let value = e.target.value;\n     let name = e.target.name;\n     this.setState( prevState => {\n        return { \n           newUser : {\n                    ...prevState.newUser, [name]: value\n                   }\n        }\n     }, () => console.log(this.state.newUser)\n     )\n }\n\n```\n\n`handleInput()` will replace both `handleFullName()` and `handleAge()`. The only change we've made is to extract the value of name from form variable and then use that data to set the state. So, the value of the name prop should be same as the key of the property in the state.\n\nNext up, `<Select />`.\n\n[](#select)<Select />\n---------------------\n\nThe `<Select />` component displays a list of drop-down items. Usually, there will be a placeholder text or a default value for the drop-down. Here are the props for the `<Select />`:\n\n*   `title` — The value of the title prop be displayed as label of the `<select>` element.\n*   `name` — The name attribute for the `<select>` element.\n*   `options` — An array of available options. For instance, we are using the `<select />` to display a drop-down list of gender options.\n*   `value` — The value prop can be used to set the default value of the field.\n*   `placeholder` — A short string that populates the first `<option>` tag.\n*   `handleChange` — A control function that gets triggered when the input control element's value changes. The function then updates the state of the parent component and passes the new value through the value prop.\n\nLet's have a look at the actual code for the `<Select />` component.\n\n```javascript\n/*Select.jsx*/\n\nconst Select = (props) => {\n    return(\n        <div className=\"form-group\">\n            <label htmlFor={props.name}> {props.title} </label>\n            <select\n              name={props.name}\n              value={props.value}\n              onChange={props.handleChange}\n              >\n              <option value=\"\" disabled>{props.placeholder}</option>\n              {props.options.map(option => {\n                return (\n                  <option\n                    key={option}\n                    value={option}\n                    label={option}>{option}\n                  </option>\n                );\n              })}\n            </select>\n      </div>)\n}\n\nexport default Select;\n\n```\n\nThe first option tag is populated with the placeholder string. The rest of the options are mapped from the array that we passed on as props. While using the map method to iterate through DOM elements, remember to add a `key` attribute that's unique. This helps React keep track of DOM updates. If you leave out the `key` attribute, you will see a warning in your browser and might encounter performance issues down the road.\n\nNow, let's have a look at the callback function. The logic for method is similar to that of the generic handleInput that we created earlier. We can actually plug in that handler method as a prop and everything should work as expected.\n\n```javascript\n<Select title={'Gender'}\n       name={'gender'}\n       options = {this.state.genderOptions} \n       value = {this.state.newUser.gender}\n       placeholder = {'Select Gender'}\n       handleChange = {this.handleInput}\n/> {/* Age Selection */}\n\n```\n\n[](#checkbox)<CheckBox/>\n------------------------\n\nCheckboxes might appear a bit more complicated because arrays are involved. But both `<CheckBox>` and `<Select>` are similar in terms of props. The major difference lies in how the state is updated. Let's have a look at the props first.\n\n*   `title` — Already covered.\n*   `name` — Already covered.\n*   `options` — An array of available options. The array is usually composed of strings that end up being the label and the value of each checkbox.\n*   `selectedOptions` — An array of selected values. If the user had selected certain choices beforehand, the selectedOptions array would be populated with those values. This is synonymous to the <Select /> component's value prop.\n*   `handleChange` — Already covered.\n\nHere's the CheckBox component.\n\n```javascript\n/* CheckBox.jsx */\n\nconst CheckBox = (props) => {\n\n    return( <div>\n    <label for={props.name} className=\"form-label\">{props.title}</label>\n    <div className=\"checkbox-group\">\n      {props.options.map(option => {\n        return (\n          <label key={option}>\n            <input\n              className=\"form-checkbox\"\n              id = {props.name}\n              name={props.name}\n              onChange={props.handleChange}\n              value={option}\n              checked={ props.selectedOptions.indexOf(option) > -1 }\n              type=\"checkbox\" /> {option}\n          </label>\n        );\n      })}\n    </div>\n  </div>\n);\n\n}\n\n```\n\nThe line `checked={ props.selectedOptions.indexOf(option) > -1 }` might be confusing if you've never used JavaScript's `indexOf` method before. `indexOf` checks whether a particular item exists within an array and returns its index. Assuming that option holds a string, it checks whether the string exists within the `selectedOptions` and if the item doesn't exist in the array, it will return -1. This is the easiest way to populate values to a checkbox group in a form.\n\nSince we need to push an array into the state, which is more complicated than the usual `handleInput()`, let's create a new method for handling checkboxes.\n\n```javascript\nhandleSkillsCheckBox(e) {\n\n    const newSelection = e.target.value;\n    let newSelectionArray;\n\n    if(this.state.newUser.skills.indexOf(newSelection) > -1) {\n      newSelectionArray = this.state.newUser.skills.filter(s => s !== newSelection)\n    } else {\n      newSelectionArray = [...this.state.newUser.skills, newSelection];\n    }\n\n      this.setState( prevState => ({ newUser:\n        {...prevState.newUser, skills: newSelectionArray }\n      })\n      )\n}\n\n```\n\nThe user can interact with the checkbox in two ways — check an item, or uncheck an existing item. This user interaction corresponds to two actions — adding an item into the array, or removing an existing item from the array.\n\nThe `newSelection` variable has the value of the newly selected (or deselected) item. We compare it with the existing selection of items stored at `this.state.newUser.skills`. We're again going to rely on `indexOf` to check whether the string stored in `newSelection` is already of the array.  \nIf it's part of the array, the condition falls true and the new selection item is filtered out and stored in newSelection. Otherwise, the newSelection item is concatenated into the array using spread operator.\n\nFinally, the state is updated using `this.setState`.\n\n[](#textarea)<TextArea />\n-------------------------\n\nI am going to leave this as an exercise for the reader. This is fairly similar to the `<Input />` component that we created earlier. The `<textarea />` element should accept additional props for rows and columns. The code for the `TextArea` component is available in the sandbox demo for reference.\n\n[](#button)<Button />\n---------------------\n\nButtons are easiest of the lot. You can keep the `<Button />` component fairly simple and easy. Here is are the list of props that a button requires:\n\n*   `title` — Text for the button.\n*   `action` — Callback function\n*   `style` — Style objects can be passed as props.\n\nHere's the `<Button/>` in action:\n\n```javascript\n/*Button.jsx */\nconst Button = (props) => {\n    console.log(props.style);\n    return(\n        <button \n            style= {props.style} \n            onClick= {props.action}>    \n            {props.title} \n        </button>)\n}\n\nexport default Button;\n\n```\n\n[](#form-actions-handleclearform-and-handleformsubmit)Form Actions — `handleClearForm` and `handleFormSubmit`\n-------------------------------------------------------------------------------------------------------------\n\nWe've nearly reached the end of the tunnel. The last step is to compose the form actions. Since the FormContainer component maintains the state, the form action methods will go there.\n\nThe `handleClearForm` method will clear the state and set it back to its initial values.\n\n```javascript\nhandleClearForm(e) {\n\n      e.preventDefault();\n      this.setState({ \n        newUser: {\n          name: '',\n          age: '',\n          gender: '',\n          skills: [],\n          about: ''\n        },\n      })\n  }\n\n```\n\nThe line `e.preventDefault()` prevents the page from being refreshed on form submission, which is the default form behavior.\n\nThe `handleFormSubmit()` method takes care of making AJAX requests to the server. The data that needs to be sent is available at this.state.newUser. There are many libraries that you can use to make AJAX calls. I am going to use fetch here.\n\n```javascript\nhandleFormSubmit(e) {\n    e.preventDefault();\n    let userData = this.state.newUser;\n\n    fetch('http://example.com',{\n        method: \"POST\",\n        body: JSON.stringify(userData),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n      }).then(response => {\n        response.json().then(data =>{\n          console.log(\"Successful\" + data);\n        })\n    })\n  }   \n\n```\n\nThat's it!\n\n[](#summary)Summary\n-------------------\n\nIn this article, we've covered everything that you need to know about building forms in React. React has component-based architecture and the components are meant to be reusable. We've gone ahead and created components for the input elements, such as: `<input/>`, `<select />`, `<textArea/>`, etc. You can further customize the components according to your requirements by passing more props.\n\nI hope you've had a good read. What are your thoughts about building forms using React? If you have anything to share, let us know in the comments.","_id":"RnFGXODGFlwDUYjI"}
{"title":"Understanding React Higher-Order Components by Example","sourceUrl":"https://levelup.gitconnected.com/understanding-react-higher-order-components-by-example-95e8c47c8006","path":"React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/React/","category":"React","tags":["React"," HOC"],"excerpt":"Build a React higher-order component step-by-step to understand how to implement the HOC pattern","date":{"$$date":1539621355364},"coverImage":"","type":"Post","frontmatter":"---\npath: \"React/\"\ndate: \"2018-10-15\"\ntitle: \"Understanding React Higher-Order Components by Example\"\ntags: [\"React\",\"HOC\"]\ncategory: \"React\"\ncategoryColor: \"#F3C610\"\nexcerpt: \"Build a React higher-order component step-by-step to understand how to implement the HOC pattern\"\ncoverImage: \"\"\nsourceUrl: \"https://levelup.gitconnected.com/understanding-react-higher-order-components-by-example-95e8c47c8006\"\ntype: \"Post\"\n---\n    ","filePath":"pages/React/.md","_id":"ViCaT7Hot8Og0292","htmlCode":"<div><div><h1>Understanding React Higher-Order Components by&nbsp;Example</h1><h2>Build a React higher-order component step-by-step to understand how to implement the HOC&nbsp;pattern</h2><p>In this tutorial we will cover the concepts needed to build your own higher-order components (HOC). We will implement a HOC to save React state to <code>localStorage</code>, called <code>withStorage</code>, that will allow you to inject the functionality into components without needing to duplicate the logic across your entire application.</p><blockquote>If you’re interested in see the same example in render props, check out <a data->this article</a></blockquote></div><div><h3>An introduction to&nbsp;HOC</h3><p>A higher-order component in React is a pattern used to share common functionality between components without repeating code. A higher-order component is actually not a component though, <span data-creator->it is a function</span>. A HOC function takes a component as an argument and returns a component. It transforms a component into another component and adds additional data or functionality. In short:</p><pre>const NewComponent = (BaseComponent) =&gt; {<br>  // ... create new component from old one and update<br>  return UpdatedComponent<br>}</pre><p>Two HOC’s implementations that you may be familiar with in the React ecosystem are <code>connect</code> from Redux and <code>withRouter</code> from React Router. The <code>connect</code> function from Redux is used to give components access to the global state in the Redux store, and it passes these values to the component as props. The <code>withRouter</code> function injects the router information and functionality into the component, enabling the developer access or change the route.</p></div><div><h3>The higher-order component pattern</h3><p>A higher-order component is a function that takes a component as an argument and returns a component. This means that a HOC will always have a form similar to the follow:</p><pre><code>import React from 'react';<br><br>const higherOrderComponent = (WrappedComponent) =&gt; {<br>  class HOC extends React.Component {<br>    render() {<br>      return &lt;WrappedComponent /&gt;;<br>    }<br>  }<br>    <br>  return HOC;<br>};</code></pre><p>The <code>higherOrderComponent</code> is a function that takes a component called <code>WrappedComponent</code> as an argument. We create a new component called <code>HOC</code> which returns the <code>&lt;WrappedComponent/&gt;</code> from its <code>render</code> function. While this actually adds no functionality in the trivial example, it depicts the common pattern that every HOC function will follow. We can invoke the HOC as follows:</p><pre>const SimpleHOC = <code>higherOrderComponent</code>(MyComponent);</pre><h3>A basic HOC by&nbsp;example</h3><p>Now we will extend our basic higher-order component pattern to inject data into our wrapped.</p><p>Our team has actually figured out the <code>secretToLife</code> which turns out to be the number <code>42</code>. Some of our components need to share this information, and we can create a HOC called <code>withSecretToLife</code> to pass it as a prop to our components.</p><pre><code>import React from 'react';<br><br>const withSecretToLife = (WrappedComponent) =&gt; {<br>  class HOC extends React.Component {<br>    render() {<br>      return (<br>        &lt;WrappedComponent<br>          {...this.props}<br>          secretToLife={42}<br>        /&gt;<br>      );<br>    }<br>  }<br>    <br>  return HOC;<br>};<br><br>export default withSecretToLife;</code></pre><p>Notice that this HOC is almost identical to our basic pattern. All we have done is add a prop <code>secretToLife={42}</code>, which allows the wrapped component to access the value by calling <code>this.props.secretToLife</code>.</p><p>The other addition is that we spread the props passed to the component. This ensures that any other props that are passed to the wrapped component will be accessible via <code>this.props</code> in the same manner they would be called if the component was not passed through our higher-order component function.</p><pre><code>import React from 'react';<br>import withSecretToLife from 'components/withSecretToLife';<br><br>const DisplayTheSecret = props =&gt; (<br>  &lt;div&gt;<br>    The secret to life is {props.secretToLife}.<br>  &lt;/div&gt;<br>);<br><br>const WrappedComponent = withSecretToLife(DisplayTheSecret);<br><br>export default WrappedComponent;</code></pre><p>Our <code>WrappedComponent</code>, which is just an enhanced version of <code>&lt;DisplayTheSecret/&gt;</code>, will allow us to access <code>secretToLife</code> as a prop.</p><h3>A practical HOC by&nbsp;example</h3><p>Now that we have a solid grasp on the fundamental pattern for HOC, we can build one that is practical for a real application. A higher-order component has access to all the default React API, including <code>state</code> and the lifecycle methods.</p><p>The functionality of our <code>withStorage</code> HOC will be to save/load the state of a component, allowing us to quickly access and render it on a page load.</p><pre><code>import React from 'react';<br><br>const withStorage = (WrappedComponent) =&gt; {<br>  class HOC extends React.Component {<br>    state = {<br>      localStorageAvailable: false, <br>    };<br>  <br>    componentDidMount() {<br>       this.checkLocalStorageExists();<br>    }<br>  <br>    checkLocalStorageExists() {<br>      const testKey = 'test';<br><br>      try {<br>          localStorage.setItem(testKey, testKey);<br>          localStorage.removeItem(testKey);<br>          this.setState({ localStorageAvailable: true });<br>      } catch(e) {<br>          this.setState({ localStorageAvailable: false });<br>      } <br>    }<br>  <br>    load = (key) =&gt; {<br>      if (this.state.localStorageAvailable) {<br>        return localStorage.getItem(key); <br>      }<br>      <br>      return null;<br>    }<br>    <br>    save = (key, data) =&gt; {<br>      if (this.state.localStorageAvailable) {<br>        localStorage.setItem(key, data);<br>      }<br>    }<br>    <br>    remove = (key) =&gt; {<br>      if (this.state.localStorageAvailable) {<br>        localStorage.removeItem(key);<br>      }<br>    }<br>    <br>    render() {<br>      return (<br>        &lt;WrappedComponent<br>          load={this.load}<br>          save={this.save}<br>          remove={this.remove}<br>          {...this.props}<br>        /&gt;<br>      );<br>    }<br>  }<br>    <br>  return HOC; <br>}<br><br>export default withStorage;</code></pre><p>At the top of <code>withStorage</code> we have a single item in the component’s state which tracks if <code>localStorage</code> is available in the given browser. We use the <code>componentDidMount</code> lifecycle hook which will check if localStorage exists in the <code>checkLocalStorageExists</code> function. Here it will test saving an item and set the state to true if it succeeds.</p><p>We also add three functions to our HOC — <code>load</code>, <code>save</code>, and <code>remove</code>. These are used to directly access the <code>localStorage</code> API if it is available. Our three functions on the HOC are passed to our wrapped component to be consumed there.</p><p>Now we will create a new component to be wrapped in our <code>withStorage</code> HOC. It will be used to display a user’s username and favorite movie. However, the API call to get this information takes a very long time. We can also assume that these values will never change once set.</p><p>To ensure we have a great user experience, we will make this API call only if the values haven’t been saved. Then every time the user returns to the page, they can access the data immediately instead of waiting for our API to return.</p><pre><code>import React from 'react';<br>import withStorage from 'components/withStorage';<br><br>class ComponentNeedingStorage extends React.Component {<br>  state = {<br>    username: '',<br>    favoriteMovie: '',<br>  }<br><br>  componentDidMount() {<br>    const username = this.props.load('username');<br>    const favoriteMovie = this.props.load('favoriteMovie');<br>    <br>    if (!username || !favoriteMovie) {<br>      // This will come from the parent component<br>      // and would be passed when we spread props {...this.props}<br>      this.props.reallyLongApiCall()<br>        .then((user) =&gt; {<br>          this.props.save('username', user.username) || '';<br>          this.props.save('favoriteMovie', user.favoriteMovie) || '';<br>          this.setState({<br>            username: user.username,<br>            favoriteMovie: user.favoriteMovie,<br>          });<br>        }); <br>    } else {<br>      this.setState({ username, favoriteMovie })<br>    }<br>  }<br><br>  render() {<br>    const { username, favoriteMovie } = this.state;<br>    <br>    if (!username || !favoriteMovie) {<br>      return &lt;div&gt;Loading...&lt;/div&gt;; <br>    }<br>    <br>    return (<br>      &lt;div&gt;<br>        My username is {username}, and I love to watch {favoriteMovie}.<br>      &lt;/div&gt;<br>    )<br>  }<br>}<br><br>const WrappedComponent = withStorage(ComponentNeedingStorage);<br><br>export default WrappedComponent;</code></pre><p>Inside the <code>componentDidMount</code> of our wrapped component, we first try to access the <code>username</code> and <code>favoriteMovie</code> from <code>localStorage</code>. If the values do not exist, we make our expensive API call named <code>this.props.reallyLongApiCall</code>. Once this function returns, we save the username and favorite to <code>localStorage</code> and update the component’s state to display them on the screen.</p><h3>Higher-order component considerations</h3><ul><li>A HOC should be a pure function with no side-effects. It should not make any modifications and just compose the original component by wrapping it in another component.</li><li>Do not use HOC’s in the render method of a component. Access the HOC outside the component definition.</li><li>Static methods must be copied over to still have access to them. A simple way to do this is the <code>hoist-non-react-statics</code> package.</li><li>Refs are not passed through.</li></ul></div></div>"}
{"title":"Javascript shorthand for cleaner code","sourceUrl":"http://www.punkchip.com/javascript-shorthand/","path":"JavaScript/JavaScript/","category":"JavaScript","tags":["JavaScript"," ES6"],"author":"","excerpt":"","dateCreated":1540823022753,"coverImage":"","type":"Post","frontmatter":"---\npath: 'JavaScript/'\ndate: 'undefined'\ntitle: 'Javascript shorthand for cleaner code'\ntags: ['JavaScript','ES6']\ncategory: 'JavaScript'\ncategoryColor: '#F3C610'\nexcerpt: ''\ncoverImage: ''\nsourceUrl: 'http://www.punkchip.com/javascript-shorthand/'\ntype: 'Post'\n---\n    ","htmlCode":"<div id=\"wrapper-container\"><div><p>A few ways to save on some bytes in your Javascript code, as well as making it more readable and quicker to write:<span></span></p><h3>Variable increment/decrement/multiply/divide</h3><p>When you want to increase or decrease a number variable by one; instead of this:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>growCount = growCount + 1;\nshrinkCount = shrinkCount - 1;</code></pre><p>You can simply do the following:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>growCount ++;\nshrinkCount --;</code></pre><p>Or to add/subtract/multiply/divide a number to/from/by itself you can do:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>growCout += 100;\nshrinkCount -= 2;\n\nmoreSweets *= 5; // multiply moreSweets by 5\nlessApple /= 2; // divide lessApple by 2\n</code></pre><h3>Ternary operator (conditional)</h3><p>This is a great code saver for when you want to do something if the test is true, else do something else:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>if(myAge &gt; legalAge) {\n    canDrink = true;\n}\nelse {\n    canDrink = false;\n}</code></pre><p>Instead, put the condition before the question mark then the if true statement and false statement after that separated by a colon:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>var canDrink = (myAge &gt; legalAge) ? true : false;</code></pre><div><time>29-05-2010&nbsp;</time>As pointed out in the comments, the above example can be further simplified to&nbsp;<code>var canDrink = myAge &gt; legalAge</code>&nbsp;because it’s returning a boolean.</div><h3>Associative array notation</h3><p>The old school way of setting up an array was to create a named array and then add each named element one by one:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>var skillSet = new Array();\nskillSet['Document language'] = 'HTML5';\nskillSet['Styling language'] = 'CSS3';\nskillSet['Javascript library'] = 'jQuery';\nskillSet['Other'] = 'Usability and accessibility';\n</code></pre><p>A quicker and more readable way is to add the elements at the same time using the object literal notation to become:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>var skillSet = {\n    'Document language' : 'HTML5', \n    'Styling language' : 'CSS3', \n    'Javascript library' : 'jQuery', \n    'Other' : 'Usability and accessibility'\n};</code></pre><p>Don’t forget to omit the final comma otherwise certain browsers will complain.</p><h3>Default assignments</h3><p>The following is useful if you are testing if a variable has previously been set and if not to try something else:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>function displayValues(limit) {\n    var length;\n    if(limit) {\n        length = limit;\n    } else {\n        length = 10;\n    }\n    for(var i = 0; i++; i &lt; = length) {\n        ...\n}</code></pre><p>A shorter way is to use the double pipe. If&nbsp;<code>limit</code>&nbsp;has not been passed to the function then&nbsp;<code>length</code>&nbsp;will be set to the default of 10:</p><pre style=\"border-color: rgba(0, 0, 0, 0.1); font-family: monospace, serif; font-size: 15px; margin-top: 0px; margin-bottom: 24px; outline: 0px; padding: 12px; vertical-align: baseline; hyphens: none; line-height: 1.6; box-sizing: border-box; max-width: 100%; white-space: pre-wrap; overflow-wrap: break-word; color: rgb(58, 65, 69);\"><code>function displayValues(limit) {\n    var length = limit || 10;\n    for(var i = 0; i &lt; = length; i++) {\n        ...\n}</code></pre><div><time>02-07-2010&nbsp;</time>The variable&nbsp;<code>length</code>&nbsp;will be set to the value of the left operand if it evaluates to true, therefore anything other than the following:<p></p><ul><li>false</li><li>0</li><li>null</li><li>undefined</li><li>empty string</li></ul><p>Otherwise it will be set to the value of the right operand. So this isn’t the right thing to use if you need to explicitly set the length to zero.</p></div></div></div>","filePath":"pages/JavaScript/.md","_id":"fTS4ML697g1E3nkO","date":{"$$date":1540824832662},"dateUpdated":1540824832662}
{"title":"12 Good JavaScript Shorthand Techniques","sourceUrl":"https://hackernoon.com/12-amazing-javascript-shorthand-techniques-fef16cdbc7fe","path":"JavaScript/JavaScript/","category":"JavaScript","tags":["JavaScript"," Shorthand Techniques"," Tips & Tricks"],"author":"Yuri Ramos","excerpt":"","dateCreated":1540823861825,"coverImage":"","type":"Post","frontmatter":"---\npath: 'JavaScript/'\ndate: 'undefined'\ntitle: '12 Good JavaScript Shorthand Techniques'\ntags: ['JavaScript','Shorthand Techniques','Tips and Tricks']\ncategory: 'JavaScript'\ncategoryColor: '#F3C610'\nexcerpt: ''\ncoverImage: ''\nsourceUrl: 'https://hackernoon.com/12-amazing-javascript-shorthand-techniques-fef16cdbc7fe'\ntype: 'Post'\n---\n    ","htmlCode":"<div id=\"wrapper-container\"><div><div><p name=\"ecd8\"><span>Update 1: Due to a lot of polarizing comments (like loved or hated the article) I just want to be clear that shorthand are useful sometimes and sometimes not</span><span name=\"aea85033d88f\" data-creator-ids=\"bf3027a42741\"><span>,</span></span><span>&nbsp;depends on which context, don’t take shorthand code as the best of any situation!</span></p><p name=\"492d\">I’ve made this post as a vital source of reference for learning shorthand JavaScript coding techniques that I have picked up over the years. To help you understand what it going on I have included the longhand versions to give some coding perspective on the shorts.</p><h3 name=\"b459\">1. Null, Undefined, Empty Checks Shorthand</h3><p name=\"c3a5\">When creating new variables sometimes you want to check if the variable you’re referencing for it’s value isn’t null or undefined. I would say this is a very common check for JavaScript coders.</p><p name=\"9b87\"><em>Longhand</em></p><p name=\"1975\"><code>if (variable1&nbsp;!== null || variable1&nbsp;!== undefined || variable1&nbsp;!== '') { let variable2 = variable1; }</code></p><p name=\"2bd9\"><em>Shorthand</em></p><pre name=\"899d\" id=\"899d\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let variable2 = variable1  || '';</code></pre><p name=\"129a\">Don’t believe me? Test it yourself (paste into Chrome Dev Tools and click run):</p><pre name=\"b47a\" id=\"b47a\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>//null value example<br>let variable1 = null;<br>let variable2 = variable1  || '';<br>console.log(variable2);<br>//output: '' (an empty string)<br><br>//undefined value example<br>let variable1 = undefined;<br>let variable2 = variable1  || '';<br>console.log(variable2);<br>//output: '' (an empty string)<br><br>//normal value example<br>let variable1 = 'hi there';<br>let variable2 = variable1  || '';<br>console.log(variable2);<br>//output: 'hi there'</code></pre><h3 name=\"2a53\">2. Object Array Notation Shorthand</h3><p name=\"445d\"><em>Longhand</em></p><p name=\"cca6\"><code>let a = new Array(); a[0] = \"myString1\"; a[1] = \"myString2\"; a[2] = \"myString3\";</code></p><p name=\"6d20\"><em>Shorthand</em></p><p name=\"4379\"><code>let a = [\"myString1\", \"myString2\", \"myString3\"];</code></p><h3 name=\"e6fa\">3. If true&nbsp;… else Shorthand</h3><p name=\"16ab\">This is a great code saver for when you want to do something if the test is true, else do something else by using the ternary operator.</p><p name=\"5ff2\"><em>Longhand:</em></p><pre name=\"75f0\" id=\"75f0\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let big;<br>if (x &gt; 10) {<br>    big = true;<br>}<br>else {<br>    big = false;<br>}</code></pre><p name=\"00ce\"><em>Shorthand:</em></p><pre name=\"3407\" id=\"3407\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let big = x &gt; 10 ? true : false;</code></pre><p name=\"9810\">If you rely on some of the weak typing characteristics of JavaScript, this can also achieve more concise code. For example, you could reduce the preceding code fragment to this:</p><pre name=\"f856\" id=\"f856\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let big = (x &gt; 10);</code></pre><pre name=\"b2f7\" id=\"b2f7\" class=\"graf graf--pre graf-after--pre\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 0px; background-color: rgba(0, 0, 0, 0.05); padding: 4px 20px 20px;\"><code>//further nested examples<br>let x = 3,<br>big = (x &gt; 10) ? \"greater 10\" : (x &lt; 5) ? \"less 5\" : \"between 5 and 10\";<br>console.log(big); //\"less 5\"</code></pre><pre name=\"1060\" id=\"1060\" class=\"graf graf--pre graf-after--pre\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 0px; background-color: rgba(0, 0, 0, 0.05); padding: 4px 20px 20px;\"><code>let x = 20,<br>big = {true: x&gt;10, false : x&lt; =10};<br>console.log(big); //\"Object {true=true, false=false}\"</code></pre><h3 name=\"be6a\">4. Declaring variables Shorthand</h3><p name=\"19d5\">I think this one is the most used abroad the community, even though we know that javascript uses<a href=\"https://www.w3schools.com/js/js_hoisting.asp\" data-href=\"https://www.w3schools.com/js/js_hoisting.asp\" rel=\"noopener\" target=\"_blank\">&nbsp;hoist</a>&nbsp;to your variable declaration. It’s a nice pattern declare all the variables at the top and inline.</p><p name=\"3908\"><em>Longhand:</em></p><pre name=\"7cff\" id=\"7cff\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let x;<br>let y;<br>let z = 3;</code></pre><p name=\"9598\"><em>Shorthand:</em></p><pre name=\"1ed5\" id=\"1ed5\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let x, y, z=3;</code></pre><h3 name=\"aebd\">5. Assignment Operators Shorthand</h3><p name=\"e2a7\">Assignment operators are used to assign values to JavaScript variables and no doubt you use arithmetic everyday without thinking (no matter what programming language you use Java, PHP, C++ it’s essentially the same principle).</p><p name=\"b592\"><em>Longhand:</em></p><pre name=\"06be\" id=\"06be\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>x=x+1;<br>minusCount = minusCount - 1;<br>y=y*10;</code></pre><p name=\"9f23\"><em>Shorthand:</em></p><pre name=\"a386\" id=\"a386\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>x++;<br>minusCount --;<br>y*=10;</code></pre><p name=\"e5a3\">Other shorthand operators, given that x=10 and y=5, the table below explains the assignment operators:</p><pre name=\"d2d9\" id=\"d2d9\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>x += y //result x=15<br>x -= y //result x=5<br>x *= y //result x=50<br>x /= y //result x=2<br>x %= y //result x=0</code></pre><h3 name=\"d084\">6. RegExp Object Shorthand</h3><p name=\"f895\">Example to avoid using the RegExp object.</p><p name=\"af8c\"><em>Longhand:</em></p><pre name=\"956e\" id=\"956e\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>var re = new RegExp(\"\\d+(.)+\\d+\",\"igm\"),<br>result = re.exec(\"padding 01234 text text 56789 padding\");<br>console.log(result); //\"01234 text text 56789\"</code></pre><p name=\"c004\"><em>Shorthand:</em></p><pre name=\"c0b8\" id=\"c0b8\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>var result = /d+(.)+d+/igm.exec(\"padding 01234 text text 56789 padding\");<br>console.log(result); //\"01234 text text 56789\"</code></pre><h3 name=\"771c\">8. If Presence Shorthand</h3><p name=\"c608\">This might be trivial, but worth a mention. When doing “if checks” assignment operators can sometimes be ommited.</p><p name=\"984f\">Longhand:</p><pre name=\"eb88\" id=\"eb88\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>if (likeJavaScript === true)</code></pre><p name=\"dd8f\">Shorthand:</p><pre name=\"e578\" id=\"e578\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>if (likeJavaScript)</code></pre><p name=\"2f9d\">Here is another example. If “c” is NOT equal to true, then do something.</p><p name=\"08f6\">Longhand:</p><pre name=\"a0ed\" id=\"a0ed\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let c;<br>if ( c!= true ) {<br>// do something...<br>}</code></pre><p name=\"231d\">Shorthand:</p><pre name=\"d381\" id=\"d381\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>let c;<br>if ( !c ) {<br>// do something...<br>}</code></pre><h3 name=\"541a\">9. Function Variable Arguments Shorthand</h3><p name=\"9079\">Object literal shorthand can take a little getting used to, but seasoned developers usually prefer it over a series of nested functions and variables. You can argue which technique is shorter, but I enjoy using object literal notation as a clean substitute to functions as constructors.</p><p name=\"7153\"><em>Longhand:</em></p><pre name=\"8f73\" id=\"8f73\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>function myFunction( myString, myNumber, myObject, myArray, myBoolean ) {<br>    // do something...<br>}<br>myFunction( \"String\", 1, [], {}, true );</code></pre><p name=\"7203\"><em>Shorthand (looks long but only because I have console.log’s in there!):</em></p><pre name=\"93b7\" id=\"93b7\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>function myFunction() {<br>    console.log( arguments.length ); // Returns 5<br>    for ( i = 0; i &lt; arguments.length; i++ ) {<br>        console.log( typeof arguments[i] ); // Returns string, number, object, object, boolean<br>    }<br>}<br>myFunction( \"String\", 1, [], {}, true );</code></pre><h3 name=\"b801\">10. charAt() Shorthand</h3><p name=\"2df3\">You can use the eval() function to do this but this bracket notation shorthand technique is much cleaner than an evaluation, and you will win the praise of colleagues who once scoffed at your amateur coding abilities!</p><p name=\"65ba\"><em>Longhand:</em></p><pre name=\"4d0a\" id=\"4d0a\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>\"myString\".charAt(0);</code></pre><p name=\"8dcd\"><em>Shorthand:</em></p><pre name=\"6cdc\" id=\"6cdc\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>\"myString\"[0]; // Returns 'm'</code></pre><h3 name=\"d628\">11. Short function&nbsp;calling</h3><p name=\"2f33\">Just like #1 you can use ternary operators to make function calling shorthand based on a conditional.</p><p name=\"4a60\"><em>Longhand:</em></p><pre name=\"ece6\" id=\"ece6\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>function x() {console.log('x')};function y() {console.log('y')};<br>let z = 3;<br>if (z == 3) <br>{<br>    x();<br>} else <br>{<br>    y();<br>}</code></pre><p name=\"8f10\"><em>Shorthand:</em></p><pre name=\"91ce\" id=\"91ce\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><span name=\"anon_6148942e0f32\" data-creator-ids=\"anon\"><code>function x() {console.log('x')};function y() {console.log('y')};let z = 3;<br>(z==3?x:y)(); // Short version!</code></span></pre><h3 name=\"8352\">12. Decimal base exponents</h3><p name=\"abbd\">You may have seen this one around it’s essentially a fancy way to write without the zeros. 1e7 essentially means 1 followed by 7 zeros — it represents a decimal base (JS interprets as a float type) equal to 10,000,000.</p><p name=\"2f9c\"><em>Longhand:</em></p><pre name=\"d34a\" id=\"d34a\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>for (let i = 0; i &lt; 10000; i++) {</code></pre><p name=\"a342\"><em>Shorthand:</em></p><pre name=\"ef74\" id=\"ef74\" class=\"graf graf--pre graf-after--p\" style=\"font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, monospace; font-size: 16px; margin: 43px 0px 0px; background-color: rgba(0, 0, 0, 0.05); padding: 20px;\"><code>for (let i = 0; i &lt; 1e4; i++) {</code></pre></div><div data-paragraph-count=\"3\"><figure name=\"9f38\" data-scroll=\"native\"><div></div></figure></div></div></div>","filePath":"pages/JavaScript/.md","_id":"sbK2FgN5Uo8OOn4G","date":{"$$date":1540824663334},"dateUpdated":1540824663334}
{"$$indexCreated":{"fieldName":"name","unique":false,"sparse":false}}
